МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ
РАДІОЕЛЕКТРОНІКИ
КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ
 




ЗВІТ
з практичної роботи  №2
з дисципліни «Архітектура програмного забезпечення»
на тему «Архітектура Discord» 
 


                    	 
Виконав:                                                  Прийняв:
ст. гр. ПЗПІ-22-10                        ст. викл. Сокорчук І. П. 
Хижняк Д. С.



Харків 2025
1.	Історія змін
Таблиця 1 – історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	24.04.2025	0.1	Створено розділи: «Завдання»,  «Опис виконаної роботи», «Висновки».
2	25.04.2025	0.2	Додано додаток Б
3	26.04.2025	1.0	Додано відеозапис презентації

2.	Завдання
Підготувати доповідь на тему «Архітектура Discord».
3.	Опис виконаної роботи
У цій роботі було детально розглянуто архітектуру платформи Discord — одного з найбільших сервісів для текстового, голосового та відеоспілкування. Discord обслуговує понад 150 мільйонів активних користувачів щомісяця та підтримує більше 19 мільйонів серверів щотижня, що вимагає особливої уваги до побудови інфраструктури.
На стороні клієнта Discord використовує Electron і React для настільних застосунків та React Native для мобільних пристроїв. Завдяки цьому вдається підтримувати кросплатформенність і забезпечувати оновлення функціональності одночасно на всіх пристроях. Для комунікації у реальному часі застосовуються постійні WebSocket-з'єднання.
Особливу увагу приділено реалізації системи повідомлень у реальному часі. Серверна частина побудована на мові Elixir, що працює на віртуальній машині BEAM. Кожен сервер користувачів, або «гільдія», обробляється окремим процесом, що дозволяє масштабувати обробку повідомлень на мільйони одночасних з'єднань.
Discord активно використовує мікросервісну архітектуру. Ключові сервіси написані на Elixir, а для обробки запитів до баз даних і роботи з повідомленнями використовуються сервіси на Python і Rust. Це дозволяє гнучко розподіляти навантаження та ефективно масштабувати окремі компоненти системи.
Сховище даних також зазнало значних змін. Спочатку застосовувалася MongoDB, пізніше Discord перейшов на Cassandra, а потім на ScyllaDB для забезпечення вищої продуктивності та зниження затримок. Для оптимізації доступу до даних використовуються проксі на Rust, що допомагає уникати гарячих партицій у базі.
Голосові виклики в Discord побудовані на базі WebRTC із використанням SFU-серверів. Власна система шифрування на базі алгоритму Salsa20 забезпечує додатковий контроль за безпекою та продуктивністю. Для економії пропускної здатності впроваджено оптимізації, зокрема детекцію мовлення (VAD).
Для масштабування платформи застосовується шардінг серверів за гільдіями, автоматичне балансування навантаження та масштабування у хмарній інфраструктурі Google Cloud Platform. У різних регіонах світу розміщено понад 30 дата-центрів, що гарантує мінімальні затримки для користувачів незалежно від їхнього розташування.
Надійність платформи забезпечується завдяки використанню моделей fault-tolerance в Elixir: системи нагляду (supervision trees) автоматично відновлюють сервіси у разі збоїв. Також підтримується гаряче оновлення коду без зупинки роботи основних систем.
У підсумку архітектура Discord — це приклад глибокої інженерної роботи із застосуванням найсучасніших підходів до побудови розподілених високонавантажених систем.
4.	Висновки
У ході вивчення архітектури Discord було встановлено, що успішна робота платформи при обслуговуванні сотень мільйонів користувачів стала можливою завдяки поєднанню сучасних технологій та ефективних інженерних рішень. Використання мікросервісної архітектури, оптимізованих баз даних, спеціалізованих серверних рішень для голосових дзвінків і масштабованої інфраструктури дозволило забезпечити високу доступність, низькі затримки та стійкість до збоїв.
Особливе значення мають вибір мови програмування Elixir для обробки реального часу та застосування горизонтального шардінгу для масштабування серверної частини. Перехід від традиційних рішень на основі MongoDB до більш спеціалізованих систем зберігання, таких як ScyllaDB, свідчить про глибоке розуміння вимог до обробки великих обсягів даних у режимі реального часу.
Архітектура Discord демонструє, що правильна комбінація технологій, оптимізація кожного компонента і стратегічне планування масштабування є ключовими факторами для побудови сучасних розподілених систем. Отримані знання можуть бути застосовані при проєктуванні інших високонавантажених платформ із подібними вимогами до надійності та масштабованості. 

Додаток  А
Посилання на відеозапис доповіді та текст хронологічного 
опису доповіді
Відеозапис доповіді на YouTube: https://youtu.be/wpR2gAJO7DQ 
00:00 Вступ
00:23 Огляд платформи
00:46 Клієнтська архітектура
01:06 Реальне часове повідомлення
01:28 Мікросервісна архітектура
01:49 Зберігання даних
02:13 Архітектура голосових викликів 
02:33 Масштабування та інфрастуктура
02:53 Надійність і відмовостійкість
03:11 Висновки 

Додаток Б
Слайди презентації доповіді
 
Рисунок Б.1 – Слайд №1
 
Рисунок Б.2 – Слайд №2
 
Рисунок Б.3 – Слайд №3
 
Рисунок Б.4 – Слайд №4
 
Рисунок Б.5 – Слайд №5
 
Рисунок Б.6 – Слайд №6
 
Рисунок Б.7 – Слайд №7
 
Рисунок Б.8 – Слайд №8
 
Рисунок Б.9 – Слайд №9
 
Рисунок Б.10 – Слайд №10
